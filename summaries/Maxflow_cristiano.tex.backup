\documentclass[a4paper,10pt]{article}
\usepackage[utf8]{inputenc}
\usepackage{mathtools}
\usepackage[top=1in, bottom=1in, left=1in, right=1in]{geometry}
\newcommand{\wid}{\widetilde{O}}
\newcommand{\eps}{\epsilon}
%opening
\title{Electrical Flows, Laplacian Systems, and Faster Approximation of
Maximum Flow in Undirected Graphs \\ Cristiano, Kelner , et al}
\author{Karthik Abinav}
\date{\vspace{-5ex}}
\begin{document}
\maketitle

\section{Introduction}
  This paper gives a laplacian solver based algorithm to the max flow problem. Using electrical flows and fast laplacian solvers, the 
  running time to the (1-$\eps$)-approximate s-t flow problem in $\wid(mn^{\frac{1}{3}}\eps^{\frac{-11}{3}})$. The paper starts
  of by giving a simpler algorithm which runs in time $\wid(m^\frac{3}{2} \eps ^ \frac{5}{2})$. Then some key observation in this algorithm is used
  to get the modified algorithm that runs in time $\wid(m^\frac{4}{3} \eps^{-3})$. Then using the smoothing and sampling techniques given by 
  [insert bibtex link to karger's paper]. The main drawback with this algorithm is that, it can get the approximate value of the flow. But, 
  there is no technique to map the flow in the sparse graph to the original graph. The paper also discusses an algorithm to dual of this problem
  that is the minimum s-t cut. It gives a $(1+\eps)$- algorithm to the minimum s-t cut problem running in time $\wid(m+n^{\frac{4}{3}} \eps^{\frac{-8}{3}})$.
  The advantage of this algorithm is that, it can get the approximate cut along with the value of the minimum cut. Hence, a gap exists between
  the primal problem and the dual problem. This issue is addressed in a further work by Kelner, Orecchia, et. al.
  
 \section{Notations}
    In this section, some notations that will be used throughout this summary will be discussed. \\
    
    $u_e$ - This defines the capacity associated with the edge $e$. \\
    
    $U$ - This defines the ratio between the highest capacity to the lowest capacity in the graph i.e. $\frac{\displaystyle \max_{e} u_e}{\displaystyle \min_e u_e}$\\
    
    Every edge in the graph is arbitrarily oriented for notational purposes. An edge that comes into a vertex $v$ is denoted by $E^{+}(v)$ and
    every edge that leaves the vertex $v$ is defined as $E^{-}(v)$. \\
    
    A vector f is a vector of flow. The $i^{th}$ coordinate of the vector denotes the flow in the $i^{th}$ edge for a given ordering of the 
    edges \\
    
    Every valid flow of value F has the following properties: 
    \begin{itemize}
    \item 
      Flow Conservation: $$\sum_{\mathclap{e \in E^+(v)}} f(e)- \sum_{\mathclap{e \in E^-(v)}} f(e) = 0 ~~~~~ \forall v \in V \setminus \{s,t\}$$
    \item
      Net flow value:
      $$|f| = F = \sum_{\mathclap{e \in E^+(s)}} f(e)- \sum_{\mathclap{e \in E^-(s)}} f(e)$$
    \item
      Feasible flow :
      $$f(e) \leq u_e ~~~~~~ \forall e \in E$$
    \end{itemize}
    
    \textbf{The maximum flow problem}: The goal of this problem is to find a valid flow of value $F^{\ast}$ such that the maximum flow that 
    can be routed from s to t in the graph is $F^{\ast}$. \\
    A $(1-\eps)$-approximation is an algorithm that returns a valid s-t flow, whose value
    is atleast $(1-\eps)\ast F^{\ast}$ 
    
    \subsection{Electrical flows}

    
 
  
  
   


\end{document}
